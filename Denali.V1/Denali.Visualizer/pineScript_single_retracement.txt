// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© MelonLordRobertshttps://www.tradingview.com/chart/lpuvUwJC/?symbol=NASDAQ%3AAAPL#

//@version=5
indicator("Elephant Bars", overlay=true)

//--Elephants Input--
averageRangeBacklog = input.int(100, title="Length of the lookback period in the calculation of SMA for the body range of the bars.")
elephantBarThreshold = input.float(1.5, title="The threshold a bar's body range must exceed in order to be classied as an Elephant.")
retracementBodyThreshold = input.float(0.50, title="The threshold a bar's body range must NOT exceed in order to be classified as a Retracemnt, calculated as a percentage of the Elephant bar's body range.")
retracementPriceThreshold = input.float(0.25, title="The threshold a bar's price must NOT exceed away from the Elephant bar's close to be classified as a retracement, calculated as a percentage of the Elephant bar's body range.")
retracementConsolidatonMaxLength = input.int(2, title="The total number of bars a retracment consolidation can last before an Elephant is abondoned")


//--Current Tick calculations
bodyRange = math.abs(open - close)
bodyRangeAverage = ta.sma(bodyRange, averageRangeBacklog)
bodyMidPoint = math.avg(open, close)
bool elephantBar = (bodyRange >= bodyRangeAverage * elephantBarThreshold)


//For now, only consider retracements that last one bar
retracementBar = false
long =false
if(elephantBar[1])
    retracementBody = false
    retracementPrice = false
    //Whether or not we are looking for a long or short continuation
    long := (close[1] > open[1])
    retracementBody := (bodyRange <= bodyRange[1] * retracementBodyThreshold)
    if(long)
        retracementPrice := ((bodyRange[1] * retracementPriceThreshold) + close[1]) >= math.max(open, close)
    else
        retracementPrice := ((bodyRange[1] * retracementPriceThreshold) - close[1]) <= math.min(open, close)

    retracementBar := (retracementBody and retracementPrice)
    
buy = false
if(retracementBar[1] and (close[2] > open[2]) and close > math.max(open[1], close[1]))
    buy := true
    
plotchar(elephantBar, "Elephant", "üêò", location.abovebar, color.silver, size = size.tiny)
plotchar(retracementBar, "Retracement", "‚ùï", location.abovebar, color.silver, size = size.tiny)
plotchar(buy, "Retracement", "üêâ", location.abovebar, color.silver, size = size.tiny)

//--Retracement--
bool retracement = elephantBar[1]
bool retracmentThresholdMet = bodyRange <= bodyRange[1] * retracementBodyThreshold
float midpoint = math.avg(open[1], close[1])
bool candleOpen = (close[1] > open[1])



//SMAs
// Checkbox's for the other 2 MA's
a = input(true, title="Enable 1st MA")
b = input(true, title="Enable 2nd MA")
c = input(true, title="Enable 3rd MA")

len1 = input.int(3, minval=1, title="Length1")
len2 = input.int(8, minval=1, title="Length2")
len3 = input.int(21, minval=1, title="Length3")

src1 = input(close, title="Source1")
src2 = input(close, title="Source2")
src3 = input(close, title="Source3")

out1 = ta.sma(src1, len1)
out2 = ta.sma(src2, len2)
out3 = ta.sma(src3, len3)

plot(a and out1 ? out1: na, title="SMA1", color=color.green, linewidth=1, transp=50)
plot(b and out2 ? out2: na, title="SMA2", color=color.blue, linewidth=2, transp=50)
plot(c and out3 ? out3: na, title="SMA3", color=color.orange, linewidth=3, transp=50)
